
#include "FreeRTOS.h"
#include "userinterface.h"
#include "xil_printf.h"
#include "cmvsoft.h"


static void vTaskUserInterface(void *p)
{
	BaseType_t Status;
	char main, submain, sub, subsub;
	cmvConfig *cmvConfigPtr = (cmvConfig *) p;

	while(1)
	{
		main = interfaceMain(); // main menu
		switch(main)
		{
			case '1':
			submain = 'A';
			while(submain != INTERFACE_EXIT)
			{
				xil_printf("\x1B[H\x1B[J");
				xil_printf("CMV12000 Image\n\r");
				if(cmvConfigPtr->SensorMode == cmv_mode_continuous)
				{
					xil_printf("1) Grab image[continuous_mode] - ");
					if(cmvConfigPtr->ContinuousModeOn)xil_printf("stop\n\r");
					else xil_printf("start\n\r");
				}
				else xil_printf("1) Grab image\n\r");
				xil_printf("2) Settings\n\r");
				xil_printf("3) Exit\n\r");
				xil_printf("Pick options:");
				scanf(" %c",&submain);

				if( submain == '1') /* GRAB IMAGE */
				{
					xil_printf("\x1B[H\x1B[J");
					xil_printf("Procedura wywolania zdjecia...\n\r");

					xTaskCreate(vTaskCmvSoftTrigger, "CMV_SOFT", THREAD_STACKSIZE, (void *)cmvConfigPtr, DEFAULT_THREAD_PRIO+2, NULL);

					xSemaphoreTake(xSemaphoreUserInterface, portMAX_DELAY);

					vTaskDelay(pdMS_TO_TICKS(2000));

				}
				if (submain == '2') /* SETTINGS */
				{
					sub = 'A';
					while(sub != '0')
					{
					xil_printf("\x1B[H\x1B[J");
					xil_printf(" Settings\n\r");
					xil_printf("1) Exposure Mode: ");
					if (cmvConfigPtr->ExposureMode == 1) {xil_printf(" External\n\r");} else {xil_printf(" Internal\n\r");}

					xil_printf("2) Exposure Time [T_EXP1]: %d \n\r",cmvConfigPtr->ExposureTimeTexp1Us);
					xil_printf("3) Exposure Time [T_EXP2]: %d \n\r",cmvConfigPtr->ExposureTimeTexp2Us);

					xil_printf("4) Number of frame: %d \n\r",cmvConfigPtr->NumberOfFrame);

					xil_printf("5) Sensor Mode: ");
					if (cmvConfigPtr->SensorMode == cmv_mode_normal) {xil_printf(" Normal \n\r");}
					else if(cmvConfigPtr->SensorMode == cmv_mode_continuous) {xil_printf(" Continuous \n\r");}
					else if(cmvConfigPtr->SensorMode == cmv_mode_hdr) {xil_printf(" HDR \n\r");}

					xil_printf("6) EXIT\n\r");
					xil_printf("Which option modyfi? :\n\r");
					scanf(" %c",&sub);

					if(sub < '1' || sub > '5')
					{
						sub = '0';
					}

					if(sub == '1') /* EXPOSURE MODE */
					{
						xil_printf("\x1B[H\x1B[J");
						xil_printf("Exposure mode: \n\r",cmvConfigPtr->ExposureMode);
						xil_printf("1) External \n\r");
						xil_printf("2) Internal \n\r");
						xil_printf("3) EXIT \n\r");
						scanf(" %c",&subsub);

						if(subsub == '1') { cmvConfigPtr->ExposureMode = cmv_exp_external;};
						if(subsub == '2') { cmvConfigPtr->ExposureMode = cmv_exp_internal;};
						if(subsub < '1' && subsub > '2') {subsub = '0';};
					}
					if(sub == '2') /* EXPOSURE TIME T_EXP1 */
					{
						xil_printf("\x1B[H\x1B[J");
						xil_printf(" Exposure Time [T_EXP1]: %d \n\r",cmvConfigPtr->ExposureTimeTexp1Us);
						xil_printf("Enter value[us]:");
						scanf(" %d",&cmvConfigPtr->ExposureTimeTexp1Us);
					}
					if(sub == '3') /* EXPOSURE TIME T_EXP2 */
					{
						xil_printf("\x1B[H\x1B[J");
						xil_printf(" Exposure Time [T_EXP2]: %d \n\r",cmvConfigPtr->ExposureTimeTexp2Us);
						xil_printf("Enter value[us]:");
						scanf(" %d",&cmvConfigPtr->ExposureTimeTexp2Us);
					}

					if(sub == '4') /* NUMBER OF FRAMES */
					{
						xil_printf("\x1B[H\x1B[J");
						xil_printf(" Number of frame: %d \n\r",cmvConfigPtr->NumberOfFrame);
						xil_printf("Enter value:");
						scanf(" %d",&cmvConfigPtr->NumberOfFrame);
					}
					if(sub == '5') /* SENSOR MODE */
					{
						xil_printf("\x1B[H\x1B[J");
						xil_printf("Sensor mode: \n\r",cmvConfigPtr->SensorMode);
						xil_printf("1) Normal  \n\r");
						xil_printf("2) Continuous \n\r");
						xil_printf("3) HDR \n\r");
						xil_printf("4) EXIT \n\r");
						scanf(" %c",&subsub);
						/* protect against change mode */
						if(cmvConfigPtr->ContinuousModeOn && (subsub == '1' || subsub == '3'))
							{
								xil_printf("First turn off Continuous mode");
								vTaskDelay(pdMS_TO_TICKS(2000));
								subsub = '0';
							}
						if(subsub == '1') { cmvConfigPtr->SensorMode = cmv_mode_normal;};
						if(subsub == '2') { cmvConfigPtr->SensorMode = cmv_mode_continuous;};
						if(subsub == '3') { cmvConfigPtr->SensorMode = cmv_mode_hdr;};
						if(subsub < '1' && subsub > '3') {subsub = '0';};
					}
					}
				}
				if (submain == '3') /* EXIT */
				{
					submain = '0';
				}
				}

			break;

			case '2': // HOUSEKEEPING
				submain = 'A';
			while(submain != '0')
			{
				submain = interfaceHousekeeping(); // wykolanie menu housekeeping
				if( submain == '1')
				{
					xil_printf("pojedynczy odczyt\n\r");
					xil_printf("wywolanie tasku z parametrem\n\r");
					vTaskDelay(pdMS_TO_TICKS(2000));

				}
				if( submain == '2')
				{
					xil_printf("Wszystkie pomiary\n\r");
					xil_printf("Wywolanie tasku z pomiarami\n\r");
					vTaskDelay(pdMS_TO_TICKS(2000));
				}
				if( submain == '3')
				{
					submain = '0';

				}
				if( submain == '4')
				{
					xil_printf("kaliubracja");
					vTaskDelay(pdMS_TO_TICKS(1000));
				}
				if( submain == '5')
				{
					submain = '0';
				}

			}
			break;
			case '3':
				submain = 'A';
			while(submain != '0')
			{
				xil_printf("\x1B[H\x1B[J");
				xil_printf(" Settings\n\r");
				xil_printf("3) EXIT \n\r");
				scanf(" %c",&submain);
				xil_printf("\x1B[H\x1B[J");

				if(submain == '3')
				{
					submain = '0';
				}
			}
			break;
			default:
				{
					xil_printf("\x1B[H\x1B[J");
					xil_printf("Press another value\n\r");
					vTaskDelay(pdMS_TO_TICKS(1000));
				}
		}

	}
}

char interfaceMain()
{
	char value;

	xil_printf("\x1B[H\x1B[J");
	xil_printf("Control board\n\r\n\r");
	xil_printf("1) CMV12000 Image\n\r");
	xil_printf("2) Housekeeping\n\r");
	xil_printf("3) Settings\n\r");
	xil_printf("4) Diagnostics\n\r\n\r");
	xil_printf("Pick options:");

	scanf(" %c",&value);

	return value;
}

char interfaceCmv12000()
{
	char value;

	xil_printf("\x1B[H\x1B[J");
	xil_printf("CMV12000 Image\n\r");
	xil_printf("1) Grab image\n\r");
	xil_printf("2) Settings\n\r");
	xil_printf("3) Exit\n\r");
	xil_printf("Pick options:");
	scanf(" %c",&value);
	xil_printf("\x1B[H\x1B[J");

	return value;
}

char interfaceHousekeeping()
{
	char value;

	xil_printf("\x1B[H\x1B[J");
	xil_printf(" Housekeeping\n\r");
	xil_printf("1) Pojedynczy odczyt [kanal]\n\r");
	xil_printf("2) Wszystkie pomiary \n\r");
	xil_printf("3) Ustawienia\n\r");
	xil_printf("4) Kalibracja\n\r");
	xil_printf("5) EXIT\n\r");
	scanf(" %c",&value);
	xil_printf("\x1B[H\x1B[J");

	return value;
}
