
#include "freeRtos.h"
#include "semphr.h"
#include "cmvsoft.h"
#include "devices/gpio_access.h"
#include "devices/clkwiz_access.h"
#include "devices/TIMER_access.h"

//cmvConfig *cmvConfigInstance;

extern SemaphoreHandle_t xSemaphoreTimer;
extern XTmrCtr TimerInstance;
extern XGpio GpioInstance;
extern XClk_Wiz ClkWiz_Dynamic;

cmvConfig cmvConfigInstance;
cmvStatus cmvStatusInstance;

int init_ldo()
{
	/* stworzyc ustawienie statusu  */
	u32 GpioReg;
	u32 CntValue;

	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_OUTPUT);
	GpioReg |= CMV_LDO_EN;
	XGpio_DiscreteWrite(&GpioInstance, CMV_CHANNEL_OUTPUT, GpioReg);

	/* wait until power good from ldo 2,2V and 3,6V assert */
	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_INPUT);
	while((GpioReg & 0x3) != (CMV_DIG_SENR_SD1_PGD_MASK | CMV_DIG_SENR_SD2_PGD_MASK) )
	{
		GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_INPUT);

		if(GpioReg & 0x1)
		{
			cmvStatusInstance.ldo22 = 1;
		}
		if((GpioReg >> 1) & 0x1)
		{
			cmvStatusInstance.ldo36 = 1;
		}
		for(int i=0;i<10000;i++){}
		CntValue++;

		if(CntValue > 1000)
		{
			return XST_FAILURE;
		}
	}

	cmvStatusInstance.ldo = 1;
	return XST_SUCCESS;
	//odpalenie ldo i zwrócenie wartoœci power_good
}

int init_sequencer()
{
	u32 GpioReg = 0;
	u32 CntValue = 0;

	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_OUTPUT);
	GpioReg |= CMV_DIG_SEQ_EN;
	XGpio_DiscreteWrite(&GpioInstance, CMV_CHANNEL_OUTPUT, GpioReg);

	/* wait until power good from sequencer assert */
	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_INPUT);
	while((GpioReg & 0x4) != CMV_DIG_SEQ_PWRGD_MASK )
	{
		GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_INPUT);

		for(int i=0;i<10000;i++) {}
		CntValue++;

		if(CntValue > 10000)
		{
			return XST_FAILURE;
		}
	}

	cmvStatusInstance.Sequencer = 1;
	return XST_SUCCESS;
}
int init_cmvSoft(cmvConfig *cmvConfigInst)
{
	/* Dodanie opcji ponownej re-inicjalizacji  */

	int Status = XST_SUCCESS;
	u32 GpioReg;

	/* Default settings */
	cmvConfigInst->ImageName = "pic.bmp";
	cmvConfigInst->ExposureMode = cmv_exp_external;
	cmvConfigInst->ExposureTimeTexp1Us = 1000;
	cmvConfigInst->ExposureTimeTexp2Us = 0;
	cmvConfigInst->NumberOfFrame = 4;
	cmvConfigInst->SensorMode = cmv_mode_normal;
	cmvConfigInst->ContinuousModeOn = 0;
	/* Default sensor status */
	cmvStatusInstance.ldo = 0;
	cmvStatusInstance.Sequencer = 0;
	cmvStatusInstance.ContinuousMode = 0;

	Status = init_ldo();
	if( Status == XST_FAILURE)
	{
		xil_printf("Initialization LDO FAILURE");
		// powtorzyc inicjalziacje
	}

	Status = init_sequencer();
	if (Status == XST_FAILURE)
	{
		xil_printf("Initialization Sequencer FAILURE");
	}

	/* Wait 5 us until sensor stabilize voltage */
	XTmrCtr_SetOptions(&TimerInstance, TIMER_CNTR_0, XTC_INT_MODE_OPTION | XTC_DOWN_COUNT_OPTION);
	XTmrCtr_SetResetValue(&TimerInstance, TIMER_CNTR_0, 5*TIMER_1_US);
	XTmrCtr_Start(&TimerInstance, TIMER_CNTR_0);

	/* Wait for semaphore from ISR timer handler */
	xSemaphoreTake(xSemaphoreTimer, portMAX_DELAY);

	XTmrCtr_Stop(&TimerInstance, TIMER_CNTR_0);

	XClk_Wiz_EnableClock(&ClkWiz_Dynamic, CLK_CHANNEL1);

	/* Wait for 1-3 us after clock goes work */
	XTmrCtr_SetResetValue(&TimerInstance, TIMER_CNTR_0, 3*TIMER_1_US);
	XTmrCtr_Start(&TimerInstance, TIMER_CNTR_0);

	/* Wait for semaphore from ISR timer handler */
	xSemaphoreTake(xSemaphoreTimer, portMAX_DELAY);

	XTmrCtr_Stop(&TimerInstance, TIMER_CNTR_0);

	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_OUTPUT);
	GpioReg |= CMV_RESET_SEQ;
	XGpio_DiscreteWrite(&GpioInstance, CMV_CHANNEL_OUTPUT, GpioReg);

	/* Wait for 1-3 us after clock goes work */
	XTmrCtr_SetResetValue(&TimerInstance, TIMER_CNTR_0, 3*TIMER_1_US);
	XTmrCtr_Start(&TimerInstance, TIMER_CNTR_0);

	/* Wait for semaphore from ISR timer handler */
	xSemaphoreTake(xSemaphoreTimer, portMAX_DELAY);
	XTmrCtr_Stop(&TimerInstance, TIMER_CNTR_0);

	/* PROGRAM DEFAULT VALUE OF SENSOR VIA SPI */
	/******************************************/


	/*
	 * sprawdzenie flagi napiecia sensora -> odczekanie 5 us
	 * zalaczenie zegara LVDS
	 * odczekanie 2 us
	 * zmiana SYS_RESET_N z 0 na 1 odczekanie 3 us
	 * implementacja struktury danych i ich wypelnienie
	 * zaprogramowanie sensora poprzez SPI (task?)
	 */

	return Status;
}

int ldoStop()
{
	u32 GpioReg;

	cmvStatusInstance.ldo

	GpioReg = XGpio_DiscreteRead(&GpioInstance, CMV_CHANNEL_OUTPUT)
}
