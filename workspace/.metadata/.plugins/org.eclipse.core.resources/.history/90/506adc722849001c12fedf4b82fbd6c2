
#include "freeRtos.h"
#include "semphr.h"
#include "cmvsoft.h"
#include "devices/gpio_access.h"
#include "devices/clkwiz_access.h"
#include "devices/TIMER_access.h"

//cmvConfig *cmvConfigInstance;

extern SemaphoreHandle_t xSemaphoreTimer;
extern XTmrCtr TimerInstance;
extern XGpio GpioInstance;


int init_cmvSoft(cmvConfig *cmvConfigInstance)
{
	/* Dodanie opcji ponownej rei-nicjalizacji  */

	int Status = XST_FAILURE;
	u32 GpioReg;

	cmvConfig *cmvConfigPtr = (cmvConfig *)cmvConfigInstance;

	/* Power good read signal to continue process of initialization cmv12000  */
	GpioReg = XGpio_DiscreteRead(&GpioInstance, GPIO_IN_CHANNEL);

	if((GpioReg & 0x1) == 0)
	{
		// odczekaæ chwile czasu
		// jesli nie blad + wymaga ponownej inicjalizacji

		return XST_FAILURE;
	}

	/* Wait 5 us until sensor stabilize voltage */
	XTmrCtr_SetOptions(&TimerInstance, TIMER_CNTR_0, XTC_INT_MODE_OPTION | XTC_DOWN_COUNT_OPTION);
	XTmrCtr_SetResetValue(&TimerInstance, TIMER_CNTR_0, 5*TIMER_1_US);
	XTmrCtr_Start(&TimerInstance, TIMER_CNTR_0);

	xSemaphoreTake(xSemaphoreTimer, portMAX_DELAY);






	/* Default settings */
	cmvConfigPtr->ImageName = "pic.bmp";
	cmvConfigPtr->ExposureMode = cmv_exp_external;
	cmvConfigPtr->ExposureTimeTexp1Us = 1000;
	cmvConfigPtr->ExposureTimeTexp2Us = 0;
	cmvConfigPtr->NumberOfFrame = 1;
	cmvConfigPtr->SensorMode = cmv_mode_normal;
	cmvConfigPtr->ContinuousModeOn = 0;



	/*
	 * sprawdzenie flagi napiecia sensora -> odczekanie 5 us
	 * zalaczenie zegara LVDS
	 * odczekanie 2 us
	 * zmiana SYS_RESET_N z 0 na 1 odczekanie 3 us
	 * implementacja struktury danych i ich wypelnienie
	 * zaprogramowanie sensora poprzez SPI (task?)
	 */




	return Status;
}
